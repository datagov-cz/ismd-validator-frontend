/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';
import { useMutation } from '@tanstack/react-query';

import { axiosInstance } from '../axios-instance';
export type ConvertFileParams = {
  output?: string;
  removeInvalidSources?: boolean;
};

export type ConvertFileBody = {
  file: Blob;
};

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const convertFile = (
  convertFileBody: ConvertFileBody,
  params?: ConvertFileParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<string>(
    {
      url: `/api/convertor/convert`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: convertFileBody,
      params,
      signal,
    },
    options,
  );
};

export const getConvertFileMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof convertFile>>,
    TError,
    { data: ConvertFileBody; params?: ConvertFileParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof convertFile>>,
  TError,
  { data: ConvertFileBody; params?: ConvertFileParams },
  TContext
> => {
  const mutationKey = ['convertFile'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof convertFile>>,
    { data: ConvertFileBody; params?: ConvertFileParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return convertFile(data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ConvertFileMutationResult = NonNullable<
  Awaited<ReturnType<typeof convertFile>>
>;
export type ConvertFileMutationBody = ConvertFileBody;
export type ConvertFileMutationError = unknown;

export const useConvertFile = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof convertFile>>,
    TError,
    { data: ConvertFileBody; params?: ConvertFileParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof convertFile>>,
  TError,
  { data: ConvertFileBody; params?: ConvertFileParams },
  TContext
> => {
  const mutationOptions = getConvertFileMutationOptions(options);

  return useMutation(mutationOptions);
};
