/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';
import { useMutation } from '@tanstack/react-query';

import { axiosInstance } from '../axios-instance';
export type CatalogRecordDtoPopis = { [key: string]: string };

export type CatalogRecordDtoN√°zev = { [key: string]: string };

export type CatalogRecordDtoKl√≠ƒçov√©Slovo = { [key: string]: string[] };

export type CatalogRecordDtoKontaktn√≠Bod = {
  [key: string]: { [key: string]: unknown };
};

export interface CatalogRecordDto {
  iri?: string;
  typ?: string;
  popis?: CatalogRecordDtoPopis;
  specifikace?: string[];
  distribuce?: DistribuceDto[];
  '@context'?: string;
  n√°zev?: CatalogRecordDtoN√°zev;
  prvek_r√∫ian?: string[];
  geografick√©_√∫zem√≠?: string[];
  prostorov√©_pokryt√≠?: string[];
  kl√≠ƒçov√©_slovo?: CatalogRecordDtoKl√≠ƒçov√©Slovo;
  periodicita_aktualizace?: string;
  t√©ma?: string[];
  koncept_euroVoc?: string[];
  kontaktn√≠_bod?: CatalogRecordDtoKontaktn√≠Bod;
}

export type ConceptValidationDtoViolations = {
  [key: string]: RuleViolationDto;
};

export interface ConceptValidationDto {
  conceptIri?: string;
  violations?: ConceptValidationDtoViolations;
}

export interface ConversionResponseDto {
  output?: string;
  errorMessage?: string;
  validationResults?: ValidationResultsDto;
  validationReport?: DetailedValidationReportDto;
  catalogReport?: CatalogRecordDto;
}

export type DetailedValidationReportDtoValidation = {
  [key: string]: ConceptValidationDto;
};

export interface DetailedValidationReportDto {
  ontology?: OntologyInfoDto;
  validation?: DetailedValidationReportDtoValidation;
}

export interface DistribuceDto {
  typ?: string;
  podm√≠nky_u≈æit√≠?: PodminkyUzitiDto;
  soubor_ke_sta≈æen√≠?: string;
  p≈ô√≠stupov√©_url?: string;
  typ_m√©dia?: string;
  form√°t?: string;
  sch√©ma?: string;
}

export type OntologyInfoDtoName = { [key: string]: string };

export type OntologyInfoDtoDescription = { [key: string]: string };

export interface OntologyInfoDto {
  name?: OntologyInfoDtoName;
  description?: OntologyInfoDtoDescription;
}

export interface PodminkyUzitiDto {
  typ?: string;
  autorsk√©_d√≠lo?: string;
  datab√°ze_jako_autorsk√©_d√≠lo?: string;
  datab√°ze_chr√°nƒõn√°_zvl√°≈°tn√≠mi_pr√°vy?: string;
  osobn√≠_√∫daje?: string;
}

export interface RuleViolationDto {
  name?: string;
  description?: string;
  level?: string;
  severity?: string;
  value?: string;
}

export interface SeverityGroupDto {
  severity?: string;
  count?: number;
  description?: string;
}

export interface ValidationResultsDto {
  severityGroups?: SeverityGroupDto[];
}

export type ConvertSSPFromIRIParams = {
  iri: string;
  output?: string;
  removeInvalidSources?: boolean;
  includeDetailedReport?: boolean;
  includeCatalogRecord?: boolean;
};

export type ConvertFileParams = {
  output?: string;
  removeInvalidSources?: boolean;
  includeDetailedReport?: boolean;
  includeCatalogRecord?: boolean;
};

export type ConvertFileBody = {
  file: Blob;
};

export type DownloadDetailedValidationReportCSVParams = {
  filename?: string;
};

export type DownloadDetailedValidationReportCSVBody = {
  detailedReport: DetailedValidationReportDto;
};

export type DownloadCatalogRecordJSONParams = {
  filename?: string;
};

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const convertSSPFromIRI = (
  params: ConvertSSPFromIRIParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<ConversionResponseDto>(
    { url: `/api/converter/ssp/convert`, method: 'POST', params, signal },
    options,
  );
};

export const getConvertSSPFromIRIMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof convertSSPFromIRI>>,
    TError,
    { params: ConvertSSPFromIRIParams },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof convertSSPFromIRI>>,
  TError,
  { params: ConvertSSPFromIRIParams },
  TContext
> => {
  const mutationKey = ['convertSSPFromIRI'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof convertSSPFromIRI>>,
    { params: ConvertSSPFromIRIParams }
  > = (props) => {
    const { params } = props ?? {};

    return convertSSPFromIRI(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ConvertSSPFromIRIMutationResult = NonNullable<
  Awaited<ReturnType<typeof convertSSPFromIRI>>
>;

export type ConvertSSPFromIRIMutationError = unknown;

export const useConvertSSPFromIRI = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof convertSSPFromIRI>>,
      TError,
      { params: ConvertSSPFromIRIParams },
      TContext
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof convertSSPFromIRI>>,
  TError,
  { params: ConvertSSPFromIRIParams },
  TContext
> => {
  const mutationOptions = getConvertSSPFromIRIMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const convertFile = (
  formData: FormData, // ConvertFileBody & ConvertFileParams
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<ConversionResponseDto>(
    {
      url: `/api/converter/convert`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      signal,
    },
    options,
  );
};

export const getConvertFileMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof convertFile>>,
    TError,
    FormData, // ConvertFileBody & ConvertFileParams
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof convertFile>>,
  TError,
  FormData, // ConvertFileBody & ConvertFileParams
  TContext
> => {
  const mutationKey = ['convertFile'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof convertFile>>,
    FormData // ConvertFileBody & ConvertFileParams
  > = (formData) => {
    return convertFile(formData, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ConvertFileMutationResult = NonNullable<
  Awaited<ReturnType<typeof convertFile>>
>;
export type ConvertFileMutationBody = ConvertFileBody;
export type ConvertFileMutationError = unknown;

export const useConvertFile = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof convertFile>>,
      TError,
      FormData, // ConvertFileBody & ConvertFileParams
      TContext
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof convertFile>>,
  TError,
  FormData, // ConvertFileBody & ConvertFileParams
  TContext
> => {
  const mutationOptions = getConvertFileMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const downloadDetailedValidationReportCSV = (
  formData: FormData, // DetailedValidationReportDto & DownloadDetailedValidationReportCSVParams
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<string>(
    {
      url: `/api/converter/convert/detailed-report/csv`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      signal,
    },
    options,
  );
};

export const getDownloadDetailedValidationReportCSVMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof downloadDetailedValidationReportCSV>>,
    TError,
    FormData, // DetailedValidationReportDto & DownloadDetailedValidationReportCSVParams
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof downloadDetailedValidationReportCSV>>,
  TError,
  FormData, // DetailedValidationReportDto & DownloadDetailedValidationReportCSVParams
  TContext
> => {
  const mutationKey = ['downloadDetailedValidationReportCSV'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof downloadDetailedValidationReportCSV>>,
    FormData // DetailedValidationReportDto & DownloadDetailedValidationReportCSVParams
  > = (formData) => {
    return downloadDetailedValidationReportCSV(formData, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DownloadDetailedValidationReportCSVMutationResult = NonNullable<
  Awaited<ReturnType<typeof downloadDetailedValidationReportCSV>>
>;
export type DownloadDetailedValidationReportCSVMutationBody =
  DownloadDetailedValidationReportCSVBody;
export type DownloadDetailedValidationReportCSVMutationError = unknown;

export const useDownloadDetailedValidationReportCSV = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof downloadDetailedValidationReportCSV>>,
      TError,
      FormData, // DownloadDetailedValidationReportCSVBody & DownloadDetailedValidationReportCSVParams
      TContext
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof downloadDetailedValidationReportCSV>>,
  TError,
  FormData, // DownloadDetailedValidationReportCSVBody & DownloadDetailedValidationReportCSVParams
  TContext
> => {
  const mutationOptions =
    getDownloadDetailedValidationReportCSVMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const downloadCatalogRecordJSON = (
  formData: FormData, // ConversionResponseDto & DownloadCatalogRecordJSONParams
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<string>(
    {
      url: `/api/converter/convert/catalog-record/json`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      signal,
    },
    options,
  );
};

export const getDownloadCatalogRecordJSONMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof downloadCatalogRecordJSON>>,
    TError,
    FormData, // ConversionResponseDto & DownloadCatalogRecordJSONParams
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof downloadCatalogRecordJSON>>,
  TError,
  FormData, // ConversionResponseDto & DownloadCatalogRecordJSONParams
  TContext
> => {
  const mutationKey = ['downloadCatalogRecordJSON'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof downloadCatalogRecordJSON>>,
    FormData // ConversionResponseDto & DownloadCatalogRecordJSONParams
  > = (formData) => {
    return downloadCatalogRecordJSON(formData, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DownloadCatalogRecordJSONMutationResult = NonNullable<
  Awaited<ReturnType<typeof downloadCatalogRecordJSON>>
>;
export type DownloadCatalogRecordJSONMutationBody = ConversionResponseDto;
export type DownloadCatalogRecordJSONMutationError = unknown;

export const useDownloadCatalogRecordJSON = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof downloadCatalogRecordJSON>>,
      TError,
      FormData,
      TContext
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof downloadCatalogRecordJSON>>,
  TError,
  FormData, // ConversionResponseDto & DownloadCatalogRecordJSONParams
  TContext
> => {
  const mutationOptions = getDownloadCatalogRecordJSONMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
