/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';
import { useMutation } from '@tanstack/react-query';

import { axiosInstance } from '../axios-instance';
export interface ConversionRequestDto {
  file?: Blob;
  output?: string;
  removeInvalidSources?: boolean;
}

export interface ConversionResponseDto {
  response?: string;
  errorMessage?: string;
}

export type ConvertFileParams = {
  conversionRequest: ConversionRequestDto;
};

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const convertFile = (
  formData: FormData,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<ConversionResponseDto>(
    {
      url: `/api/convertor/convert`,
      method: 'POST',
      data: formData,
      headers: {
        'Content-Type': 'multipart/form-data',
      },
      signal,
    },
    options,
  );
};

export const getConvertFileMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof convertFile>>,
    TError,
    FormData,
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof convertFile>>,
  TError,
  FormData,
  TContext
> => {
  const mutationKey = ['convertFile'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof convertFile>>,
    FormData
  > = (formData) => {
    return convertFile(formData, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ConvertFileMutationResult = NonNullable<
  Awaited<ReturnType<typeof convertFile>>
>;

export type ConvertFileMutationError = unknown;

export const useConvertFile = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof convertFile>>,
      TError,
      FormData,
      TContext
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof convertFile>>,
  TError,
  FormData,
  TContext
> => {
  const mutationOptions = getConvertFileMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
